name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check Prettier formatting
      run: npm run format:check
      
    - name: Validate plugin manifest
      run: |
        if [ ! -f "manifest.json" ]; then
          echo "‚ùå manifest.json not found"
          exit 1
        fi
        if ! jq empty manifest.json; then
          echo "‚ùå manifest.json is not valid JSON"
          exit 1
        fi
        echo "‚úÖ manifest.json is valid"

  validate-structure:
    name: Validate Plugin Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate required files
      run: |
        # Check for required plugin files
        required_files=("manifest.json" "code.js" "ui.html" "README.md" "LICENSE")
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
        # Check for required directories
        required_dirs=("analysis-engine" "docs" "examples")
        
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Required directory missing: $dir"
            exit 1
          else
            echo "‚úÖ Found directory: $dir"
          fi
        done
        
    - name: Validate manifest.json structure
      run: |
        if ! jq -e '.name and .id and .api and .main and .ui and .editorType' manifest.json > /dev/null; then
          echo "‚ùå manifest.json is missing required fields"
          jq '.' manifest.json
          exit 1
        fi
        echo "‚úÖ manifest.json has all required fields"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: false  # Deshabilitado hasta implementar tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Run security scan with njsscan
      uses: ajinabraham/njsscan-action@master
      with:
        args: '. --sarif --output results.sarif || true'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  build-plugin:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, validate-structure]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create plugin package
      run: |
        # Create a clean build directory
        mkdir -p build
        
        # Copy essential plugin files
        cp manifest.json build/
        cp code.js build/
        cp ui.html build/
        cp README.md build/
        cp LICENSE build/
        
        # Copy analysis engine
        cp -r analysis-engine build/
        
        # Create zip package
        cd build
        zip -r ../simple-smells-detector-${{ github.sha }}.zip .
        cd ..
        
        echo "‚úÖ Plugin package created"
        ls -la *.zip
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: plugin-package
        path: simple-smells-detector-*.zip
        retention-days: 30

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        # Check for required documentation files
        required_docs=("README.md" "CONTRIBUTING.md" "LICENSE" "docs/architecture.md" "docs/api.md")
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Missing documentation: $doc"
            exit 1
          else
            echo "‚úÖ Found: $doc"
          fi
        done
        
    - name: Validate markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        
    - name: Check for broken internal links
      run: |
        # Simple check for internal markdown links
        find . -name "*.md" -exec grep -l "\[.*\](.*\.md)" {} \; | while read file; do
          echo "Checking internal links in: $file"
          grep -o "\[.*\](.*\.md)" "$file" | sed 's/.*(\(.*\))/\1/' | while read link; do
            if [[ "$link" == /* ]]; then
              # Absolute path
              if [ ! -f ".${link}" ]; then
                echo "‚ùå Broken link in $file: $link"
                exit 1
              fi
            else
              # Relative path
              dir=$(dirname "$file")
              if [ ! -f "${dir}/${link}" ]; then
                echo "‚ùå Broken link in $file: $link"
                exit 1
              fi
            fi
          done
        done
        echo "‚úÖ All internal links are valid"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-format, validate-structure, build-plugin, docs-check]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: plugin-package
        
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./simple-smells-detector-${{ github.sha }}.zip
        asset_name: simple-smells-detector-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
        
    - name: Create Figma Community submission package
      run: |
        echo "üé® Plugin ready for Figma Community submission"
        echo "üì¶ Package: simple-smells-detector-${{ github.event.release.tag_name }}.zip"
        echo "üìã Next steps:"
        echo "  1. Upload to Figma Plugin Review"
        echo "  2. Submit for community approval"
        echo "  3. Update community page with release notes"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, validate-structure, build-plugin, docs-check]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ All checks passed successfully!"
        echo "‚úÖ Code quality: PASSED"
        echo "‚úÖ Plugin structure: VALID"
        echo "‚úÖ Documentation: COMPLETE"
        echo "‚úÖ Build: SUCCESS"
        
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "üöÄ Ready for deployment"
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "üîç PR ready for review"
        fi